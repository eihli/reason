# Neural Guided Constraint Logic Search For Neural Network Architectures

@toc

## Overview

--- high level example --- noTangle
(run (a b) (appendo a b '(1 2 3 4)))
---

With typical miniKanren's typical search strategy, that would output:

--- example appendo output --- noTangle
`(() (1 2 3 4)
  (1)  (2 3 4)
  (1 2)  (3 4)
  (1 2 3)  (4)
  (1 2 3 4) ())
---

Imagine we want a search strategy that, instead, outputs the results with a preference towards results where `a` and `b` have the same length. For example:

--- example appendo output with preference for equal-length `a` and `b` --- noTangle
`((1 2)  (3 4)
  (1)  (2 3 4)
  (1 2 3)  (4)
  () (1 2 3 4)
  (1 2 3 4) ())
---

Can we train a neural network to learn that search strategy?

Will it generalize? If we train the search strategy on `(appendo a b (1 2 3 4))` and on `(appendo a b (1 2 3 4 5))`, will it perform properly on `(appendo a b (1 2 3 4 5 6))`, returning `((1 2 3) (4 5 6))` as the first result? My gut tells me it won't. If it doesn't, is this even worthwhile? Is there a way to confirm or disconfirm my gut feeling with pure thought; without running the code?

Let's say we want to just write the code, regardless of caveats. How would we change miniKanren to allow that?

We need a way to, when faced with a choice (a disjunction), ask some external system which path of the disjunction we should take in order to arrive at our results in the desired order.

## Stepping through the search tree

Since `step` is the function that handles re-ordering disjunctions [see here](https://github.com/gregr/first-order-miniKanren/blob/d3671fd64e99d90ce6cea5b4fa2299591ff4e389/microk-fo.rkt#L70), we'll need to be able to give `run` a custom `step` function.

--- high level example --- noTangle
(run step (a b) (appendo a b '(1 2 3 4)))
---

`step` is going vary based on which "path chooser" we are using. If we want `step` to reach out to `stdin` for decisions, that will be one possible `step` function that we'd pass in. But if we want it to reach out to a separate process which is running a neural network to make decisions, then that would be a different `step` function.

The original miniKanren run looks like this:

--- run --- noTangle
(define-syntax run
  (syntax-rules ()
    ((_ n body ...) (map reify/initial-var (stream-take n (query body ...))))))
---

Since we need a custom `step` function, we'll need to make a slight adjustment.

--- run/step --- noTangle
(define-syntax run/step
  (syntax-rules ()
    ((_ n step body ...) (map reify/initial-var (stream-take n step (query body ...))))))
---

Which means we'll need a custom `stream-take`.

The original `stream-take` looks like this:

--- stream-take --- noTangle
(define (stream-take n s)
  (if (eqv? 0 n)
      '()
      (let ((s (mature s)))
        (if (pair? s)
            (cons (car s) (stream-take (and n (- n 1)) (cdr s)))
            '()))))
---

And `stream-take` with a custom `step` looks like this.

--- stream-take/step --- noTangle
(define (stream-take/step step n s)
  (if (eqv? 0 n)
      '()
      (let ((s (mature/step step s)))
        (if (pair? s)
            (cons (car s) (stream-take/step step (and n (- n 1)) (cdr s)))
            '()))))
---

`mature` is the thing that calls `step` until we get to a terminal (one of n results, or a failure).

I'm going to take a break right here from going into every little detail step-by-step.

[Greg Rosenblatt's first-order-miniKanren](https://github.com/gregr/first-order-miniKanren) already gives us all of those `<foo>/step`-like functions. We don't need any changes to that system. The only thing we need to do is define our custom chooser.

Ok.

So.

If the only thing we need to change is the `step` function, then what will our custom `step` look like?

--- step that asks for disj decision v1 --- noTangle
(define (stepper choose)
  (lambda (s)
    (match s
     ((mplus s1 s2)
      (let ((s1 (simplify s1))
            (s2 (simplify s2)))
        (cond
         ((not s1) s2)
         ((pair? s1)
          (cons (car s1)
                (mplus (cdr s1) s2)))
         (else
          (let ((path (choose s1 s2)))       ; <-- `choose` which path to take
            (if (eq? 'left path)
              (mplus (step s1) s2)
              (mplus (step s2) s1)))))))
     ((bind s g)
      (cond
       ((not s) #f)
       ((pair? s)
        (mplus (pause (car s) g)
               (bind (cdr s) g)))
       (else (bind (step s) g))))
     ((pause st g) (start st g))
     (_ s))))
---

It's kind of weird that, when you `step` `'left`, the streams get re-ordered, such that to `step` down that path again you subsequently need to `step` `'right`. If we don't want to re-order the streams, then we just need to handle the case where `s2` is mature.

Let's make it happen.

--- step that asks for disj decision
(define (stepper choose)
  (lambda (s)
    (match s
     ((mplus s1 s2)
      (let ((s1 (simplify s1))
            (s2 (simplify s2)))
        (cond
         ((not s1) s2)
         ((not s2) s1)
         ;; It's not possible for both s1 and s2 to be pairs.
         ;; (Assuming this code is written correctly as I intended.)
         ((pair? s1)
          (cons (car s1)
                (mplus (cdr s1) s2)))
         ((pair? s2)                         ; <- additional check if s2 is `mature`
          (cons (car s2)
                (mplus s1 (cdr s2))))
         (else
          (let ((path (choose s1 s2)))       ; <- `choose` which path to take
            (if (eq? 'left path)
              (mplus (step s1) s2)
              (mplus s1 (step s2))))))))
     ((bind s g)
      (cond
       ((not s) #f)
       ((pair? s)
        (mplus (pause (car s) g)
               (bind (cdr s) g)))
       (else (bind (step s) g))))
     ((pause st g) (start st g))
     (_ s))))
---

This change is unfortunate in one way: with the previous stepper, we could get the biased interleaving behavior of typical miniKanren by simply having a chooser that always chose the `'left` path. Now, we'll need an entirely new stepper function to get that behavior.

Such is life. Let's proceed.

### Simplify

Notice that we're simplifying the `mplus` streams.

--- simplifying mplus streams --- noTangle
;; ...
    (match s
     ((mplus s1 s2)
      (let ((s1 (simplify s1))
            (s2 (simplify s2)))
        (cond
;; ...
---

When a stream has been simplified with `(prune/stream (dnf/stream s))`...

> ...we are guaranteed to find all disjunctions at the top (after any available answers), as a `mplus` tree, with leaves of the form `(pause STATE GOAL)`. [[ยง6.1 The miniKanren stepper](http://minikanren.org/workshop/2019/minikanren19-final2.pdf#page=14)]

If we want to turn that into a *flat* list of "choices", then we need to walk that `mplus` tree and pull out the `pause`s into their own top-level list. Those are our choices.

That's probably desirable. For human consumption, it's easier to think about your options when they're presented to you as a flat list rather than obscured as a tree. It's easier to think "I want to take option 4" rather than "I want to take the left branch, then the left branch of that."

## Streaming output instead of building up a result with `cons`

There's one more minor change we need to make.

It's not related to the `step` stuff. It's related to how the results are produced. I think we'd benefit from having the results streamed to some external process, rather than accumulated with `cons` and returned at the end. We might be searching an infinite search space (all possible neural network architectures) and we want to be able to work with the results as the search is ongoing.

Remember what our `stream-take/step` looked like?

--- stream-take/step --- noTangle
(define (stream-take/step step n s)
  (if (eqv? 0 n)
      '()
      (let ((s (mature/step step s)))
        (if (pair? s)
            (cons (car s) (stream-take/step step (and n (- n 1)) (cdr s)))
            '()))))
---

It builds the list of results by using `cons` every time the stream matures.

Instead, let's include an `out` parameter that takes a mature stream and does whatever it wants with it; print it, send it to another process... whatever.

--- stream-out/step
(define (stream-out/step out step n s)
  (if (eqv? 0 n)
      (out '())
      (let ((s (mature/step step s)))
        (if (pair? s)
            (begin
              (out (car s))
              (stream-out/step out step (and n (- n 1)) (cdr s)))
            (out '())))))
---

Now. Since we are replacing `stream-take/step` with `stream-out/step`, we also need to write a new `run/step`.

The original `run/step` looks like this:

--- run/step --- noTangle
(define-syntax run/step
  (syntax-rules ()
    ((_ step n body ...)
     (map reify/initial-var (stream-take/step step n (query body ...))))))
---

We just need to replace `stream-take/step` with our new `stream-out/step`.

--- run-out/step
(define-syntax run-out/step
  (syntax-rules ()
    ((_ out step n body ...)
     (stream-out/step out step n (query body ...)))))
---


## Writing results to... something.

I don't know exactly what the interface is going to be for how the miniKanren program talks to the outside world. I expect I'm going to want a stdin/stdout option. And then, maybe a file option for logging? Maybe TCP for communicating with an inference engine?

--- /io.rkt
#lang racket
(require racket/tcp
         first-order-miniKanren/common)

(provide
 make-stdout-handler
 make-tcp-handler
 output-handler
 output-handler-send
 output-handler-close)

(struct output-handler (send close) #:transparent)

(define (make-stdout-handler)
  (output-handler
   (lambda (msg)
     (printf "~a~n" (reify/initial-var msg)))
   void))

(define (make-tcp-handler hostname port)
  (define-values (in out) (tcp-connect hostname port))
  (output-handler
    (lambda (msg)
      (fprintf out "~a~n" (reify/initial-var msg))
      (flush-output out))
    (lambda ()
      (close-output-port out))))
---

--- background thread for handling results
(define (out/stdout channel)
  (let loop ()
    (define message (channel-get channel))
    (cond
      ((equal? message '())
       (printf "Received \"end\" message. Terminating thread.~n"))
      (else
       (printf "Received ~a~n" (reify/initial-var message))
       (loop)))))

(define (start-stdout-thread)
  (define message-channel (make-channel))
  (define listener-thread (thread (lambda () (out/stdout message-channel))))
  (define (send-message msg) (channel-put message-channel msg))
  (values message-channel listener-thread send-message))
---

### Path-choosers

--- stdin path chooser
(define (stdin-chooser s1 s2)
  (printf "left:~n~a~n" (pp/stream 0 s1))
  (printf "right:~n~a~n" (pp/stream 0 s2))
  (printf "left or right? ")
  (do ((user-input (string->symbol (read-line))
                   (begin
                     (printf "~a is an invalid input~n" user-input)
                     (printf "left or right? ")
                     (string->symbol (read-line)))))
      ((or (eq? user-input 'left) (eq? user-input 'right)) user-input)))
---

## Test what we have so far

--- /test.rkt
#lang racket/base
(require
  (only-in racket/match match)
  first-order-miniKanren/microk-fo
  first-order-miniKanren/tools
  "pprint.rkt"
  "simplify.rkt"
  "io.rkt")

@{step that asks for disj decision}
@{stdin path chooser}
@{stream-out/step}
@{run-out/step}
@{background thread for handling results}

(define-values (chan thrd smsg) (start-stdout-thread))
(define step (stepper stdin-chooser))

(define-relation (appendo a b ab)
  (conde
   ((== a '()) (== b ab))
   ((fresh (a1 a2 res)
      (== a `(,a1 . ,a2))
      (== ab `(,a1 . ,res))
      (appendo a2 b res)))))

(run-out/step smsg step 2 (a b) (appendo a b '(1 2 3 4)))

(thread-wait thrd)
---

## Flattening our choices.



## The code โ neural-architecture-search.rkt

--- /neural-architecture-search.rkt
#lang racket/base

(require
@{requires}
)

@{step that asks for disj decision}
@{stdin path chooser}
@{stream-out/step}
---

--- requires
(only-in racket/match match)
first-order-miniKanren/microk-fo
first-order-miniKanren/tools
racket/serialize
"io.rkt"
---

## A note for the future: choosing Which Path To Explore

At a high-level, we want to use the existing first-order miniKanren implementation with one minor change: we want `mature` to step until it gets to a disjunction, and then we want to ask another process which path we should take.

QUESTION: What information will the decision-making process need? Will it have everything it needs in the disjuction? Will we need to expand the children of the disjunction to get more information? Will we need to keep track of the path we took to get to the disjunction (all of the conjuctions along the way)?
